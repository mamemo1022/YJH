# lubridate ---------------------------------------------------------------

# Import package
if (!require(lubridate)) {install.packages("lubridate")}; require(lubridate)
if (!require(dplyr)) {install.packages("dplyr")}; require(dplyr)

# Using "base" functions
as.Date("2019-03-28") # "2019-03-28"
as.Date("2019-3-28") # "2019-03-28"
as.Date("2019/03/28") # "2019-03-28"
class(as.Date("2019-03-28")) # "Date" type

as.Date("03-28-2019") # Error in charToDate(x) : 문자열이 표준서식을 따르지 않습니다 -> as.Date()는 y,m,d 순서가 중요

as.Date("2019-03-28 16:35:22") # "2019-03-28", 시간 정보x
as.POSIXct("2019-03-28 16:35:22") # "2019-03-28 16:35:22 KST"
as.POSIXct("2019-03-28 16") # "2019-03-28 KST", no hmd informations
class(as.POSIXct("2019-03-28 16:35:22")) # "POSIXct" "POSIXt"

# Using "lubridate" package - flexible
lubridate::mdy("03-28-2019") # "2019-03-28"
lubridate::dmy("28-3-19") # "2019-03-28"
lubridate::ymd("19/3/28") # "2019-03-28"
lubridate::ymd("19.3.28") # "2019-03-28"
lubridate::ymd("19|3|28") # "2019-03-28"
lubridate::ymd("19_3|28") # "2019-03-28"
lubridate::ymd("19!3@28") # "2019-03-28"
lubridate::ymd("19 3 28") # "2019-03-28"
lubridate::ymd("19 fuck 3 you 28") # "2019-03-28"
class(lubridate::ymd("19/3/28")) # "Date" type

lubridate::ymd_hms("2019-03-28 16:35:22") # "2019-03-28 16:35:22 UTC"
lubridate::ymd_h("2019-03-28 16") # "2019-03-28 16:00:00 UTC"

lubridate::now() # return now
lubridate::am(lubridate::now())
lubridate::pm(lubridate::now())

now <- lubridate::ymd_hms("19-03.28 16_35-22"); now # "2019-03-28 16:35:22 UTC"
lubridate::year(now)
lubridate::month(now)
lubridate::month(now, label = TRUE, abbr = FALSE)
lubridate::day(now)
lubridate::wday(now)
lubridate::wday(now, label = TRUE)
lubridate::yday(now)
lubridate::hour(now)
lubridate::minute(now)
lubridate::second(now)

# change the hour
now # "2019-03-28 16:35:22 UTC"
lubridate::hour(now) <- 17
now # "2019-03-28 17:35:22 UTC"

# caculation
now - lubridate::days(2) # "2019-03-26 17:35:22 UTC"
now + lubridate::hours(5) # "2019-03-28 22:35:22 UTC"
# days, seconds, minutes, hours, weeks, years, milliseconds, microseconds, nanoseconds, picoseconds

lubridate::ymd("2019-01-31") + months(0:11) # if months have no 31st day, return "NA"

# dplyr + lubridate, practice with lakres data
data(lakers)
head(lakers)

lubridate::ymd(lakers$date)
lubridate::hm(lakers$time)

# "date", "time" 변수를 합쳐 하나의 "date_time" 변수로 생성, ymd_hm() 함수로 lubridate object로 변환
# "date_time" 변수(월/일) 별 요약 값 계산
lakers2 <- lakers %>% dplyr::mutate(date_time = lubridate::ymd_hm(paste(date, time))) %>% 
  dplyr::select(-date, -time) %>% dplyr::select(date_time, dplyr::everything())
lakers2 %>% dplyr::group_by(lubridate::month(date_time)) %>% dplyr::summarise(mean_x = mean(x, na.rm = TRUE),
                                                                              mean_y = mean(y, na.rm = TRUE))
lakers2 %>% dplyr::group_by(lubridate::day(date_time)) %>% dplyr::summarise(mean_x = mean(x, na.rm = TRUE),
                                                                            mean_y = mean(y, na.rm = TRUE))

# "date_time" 변수에서 주어진 조건에 해당하는 data filtering
lakers2 %>% dplyr::filter(date_time >= lubridate::ymd_hms("2008-10-22 12:00:00"))

# inverval, %--% 으로 filtering 가능
interval <- lubridate::ymd_hms("2008-10-28 12:00:00") %--% lubridate::ymd_hms("2009-03-09 00:33:00")
lakers2 %>% dplyr::filter(date_time %within% interval)

# 날짜 올림/반올림/내림 
now
lubridate::round_date(now, "hour")
lubridate::round_date(now, "day")

lubridate::floor_date(now, "hour")
lubridate::floor_date(now, "day")

lubridate::ceiling_date(now, "hour")
lubridate::ceiling_date(now, "day")
