# stringr package -----------------------------------------------------------------

# Import package
if (!require(stringr)) {install.packages("stringr")}; require(stringr)

# 예제 data
data("sentences")
data("fruit")
data("words")
sentences
fruit
words
carnames <- rownames(mtcars)

# 첫글자를 대문자로 바꾸기
Hmisc::capitalize(fruit)

# object, pattern
# "berry"를 포함하는 문자에서 "berry" 추출
str_extract(fruit, pattern = "berry")

# str_detect()는 결과를 TRUE/FALSE 반환
str_detect(fruit, pattern = fixed("berry"))
str_detect(fruit, pattern = "berry")
fruit[str_detect(fruit, pattern = "berry")]

# "berry"를 포함하는 문자열 반환
str_subset(fruit, pattern = "berry")

# str_count()는 결과를 0/1 반환
str_count(fruit, pattern = "berry")

# split with criterion
str_split(sentences, pattern = " ") # return list type
str_split(sentences, pattern = " ") %>% lapply(length) %>% unlist()
str_split(sentences, pattern = " ", simplify = TRUE) # return vector type

# replace the pattern to replacement
str_replace(fruit, pattern = "berry", replacement = "BERRY")

# return length of string
str_length(fruit)

# like paste()
str_c(sentences, collapse = " ")
str_c("old", fruit, sep = " ")

# subset start to end 
str_sub(fruit, start = -5, end = -1)

# regex(ignore_case = TRUE)로 좀더 유연하게 pattern 탐색 가능
carnames[str_detect(carnames, regex(pattern = "Merc", ignore_case = TRUE))]
str_detect(c("jae ho", "Jae Ho", "JAE HO", "jaeho"), regex(pattern = "jae ho", ignore_case = TRUE))

str_extract(carnames, ".a.") # a 앞뒤로 한글자씩 추출하여 같이 반환
str_extract(carnames, ".a") # a 앞 한글자를 추출하여 같이 반환
str_extract(carnames, "a.") # a 뒤 한글자를 추출하여 같이 반환

carnames[str_detect(carnames, ".a")]
carnames[str_detect(carnames, ".a.")]
carnames[str_detect(carnames, "a.")]

# [[::]]{,} 형태로 더 다양한 pattern 입력 가능
carnames %>% str_extract("[[:digit:]]{1,}") # numbers
carnames %>% str_extract("[[:alpha:]]{1,}") # letters
carnames %>% str_extract_all("[[:alpha:]]{1,}") # letters
carnames %>% str_extract_all("[[:alnum:]]{1,}") # letters, numbers
carnames %>% str_extract_all("[[:upper:]]{1,}") # upper case
carnames %>% str_extract_all("[[:lower:]]{1,}") # lower case
carnames %>% str_extract_all("[[:graph:]]{1,}") # letters, numbers, punctuation
carnames %>% str_extract_all("[[:print:]]{1,}") # letters, numbers, punctuation, whitespace

# 적절한 정규표현식 통해 더 다양하게 문자열 처리를 할 수 있음
